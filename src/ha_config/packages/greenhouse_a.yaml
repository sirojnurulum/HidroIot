# ======================================================================
# ==  HOME ASSISTANT PACKAGE FOR GREENHOUSE 'A'
# ======================================================================

# This file is a complete package for a single greenhouse instance.
# To add a new greenhouse in the future, you can copy this file,
# rename it (e.g., to greenhouse_b.yaml), and then use 'find and replace'
# to change "greenhouse_a" to the new instance ID.

# =================================================
# == HELPERS
# =================================================
input_number:
  greenhouse_a_pompa_nutrisi_a_volume:
    name: "Greenhouse A: Volume Nutrisi A"
    initial: 20
    min: 1
    max: 200
    step: 1
    unit_of_measurement: "ml"
    icon: mdi:beaker-outline

  greenhouse_a_tds_target_min:
    name: "Greenhouse A: Target TDS Minimum"
    initial: 800
    min: 400
    max: 1500
    step: 10
    unit_of_measurement: "ppm"
    icon: mdi:arrow-down-bold-box-outline

  greenhouse_a_pompa_nutrisi_b_volume:
    name: "Greenhouse A: Volume Nutrisi B"
    initial: 20
    min: 1
    max: 200
    step: 1
    unit_of_measurement: "ml"
    icon: mdi:beaker-outline

  greenhouse_a_pompa_ph_volume:
    name: "Greenhouse A: Volume pH"
    initial: 10
    min: 1
    max: 100
    step: 1
    unit_of_measurement: "ml"
    icon: mdi:ph

  greenhouse_a_ph_target_max:
    name: "Greenhouse A: Target pH Maksimum"
    initial: 6.5
    min: 5.0
    max: 8.0
    step: 0.1
    icon: mdi:arrow-up-bold-box-outline


  greenhouse_a_suhu_udara_target_max:
    name: "Greenhouse A: Target Suhu Udara Maksimum (Auto Penyiraman)"
    initial: 32
    min: 20
    max: 45
    step: 1
    unit_of_measurement: "Â°C"
    icon: mdi:thermometer-high
  greenhouse_a_pompa_siram_durasi:
    name: "Greenhouse A: Durasi Penyiraman (Otomatis)"
    initial: 15
    min: 1
    max: 300
    step: 1
    unit_of_measurement: "s"
    icon: mdi:timer-sand-complete

  greenhouse_a_pompa_siram_durasi_manual:
    name: "Greenhouse A: Durasi Penyiraman (Manual)"
    initial: 10
    min: 1
    max: 300
    step: 1
    unit_of_measurement: "s"
    icon: mdi:timer-sand

  greenhouse_a_refill_target_low:
    name: "Greenhouse A: Level Air Minimum (Auto Refill)"
    initial: 20
    min: 10
    max: 50
    step: 1
    unit_of_measurement: "cm"
    icon: mdi:arrow-down-bold-box-outline

  greenhouse_a_refill_target_high:
    name: "Greenhouse A: Level Air Maksimum (Stop Refill)"
    initial: 80
    min: 60
    max: 100
    step: 1
    unit_of_measurement: "cm"
    icon: mdi:arrow-up-bold-box-outline

input_datetime:
  greenhouse_a_penyiraman_waktu_mulai:
    name: "Greenhouse A: Waktu Mulai Penyiraman"
    has_date: false
    has_time: true
    initial: "07:00:00"
    icon: mdi:clock-start

  greenhouse_a_penyiraman_waktu_selesai:
    name: "Greenhouse A: Waktu Selesai Penyiraman"
    has_date: false
    has_time: true
    initial: "15:00:00"
    icon: mdi:clock-end

input_boolean:
  greenhouse_a_penyiraman_otomatis_terjadwal:
    name: "Greenhouse A: Penyiraman Otomatis"
    icon: mdi:sprinkler-variant

  greenhouse_a_auto_dosing_enabled:
    name: "Greenhouse A: Auto-Dosing pH & TDS"
    icon: mdi:auto-fix

  greenhouse_a_auto_refill_enabled:
    name: "Greenhouse A: Auto-Refill Tandon"
    icon: mdi:water-pump

# =================================================
# == SCRIPTS
# =================================================
script:
  greenhouse_a_clear_retained_tandon_control:
    alias: "Greenhouse A: Clear Retained Tandon Control"
    description: "Hapus retained message pada topic kontrol katup tandon. Jalankan sekali jika diperlukan."
    sequence:
      - service: mqtt.publish
        data:
          topic: "hidroponik/greenhouse_a/pompa/tandon/kontrol"
          payload: ""
          retain: true
  greenhouse_a_siram_tanaman:
    alias: "Greenhouse A: Siram Tanaman"
    icon: mdi:sprinkler-variant
    sequence:
      - service: mqtt.publish
        data:
          topic: "hidroponik/greenhouse_a/pompa/penyiraman/kontrol"
          payload: "{{ states('input_number.greenhouse_a_pompa_siram_durasi_manual') | int(0) }}"

  greenhouse_a_dosis_nutrisi_a:
    alias: "Greenhouse A: Dosis Nutrisi A"
    icon: mdi:water-pump
    sequence:
      - service: mqtt.publish
        data:
          topic: "hidroponik/greenhouse_a/pompa/nutrisi_a/kontrol"
          payload: "{{ states('input_number.greenhouse_a_pompa_nutrisi_a_volume') | int(0) }}"

  greenhouse_a_dosis_nutrisi_b:
    alias: "Greenhouse A: Dosis Nutrisi B"
    icon: mdi:water-pump
    sequence:
      - service: mqtt.publish
        data:
          topic: "hidroponik/greenhouse_a/pompa/nutrisi_b/kontrol"
          payload: "{{ states('input_number.greenhouse_a_pompa_nutrisi_b_volume') | int(0) }}"

  greenhouse_a_dosis_ph:
    alias: "Greenhouse A: Dosis pH"
    icon: mdi:water-pump
    sequence:
      - service: mqtt.publish
        data:
          topic: "hidroponik/greenhouse_a/pompa/ph/kontrol"
          payload: "{{ states('input_number.greenhouse_a_pompa_ph_volume') | int(0) }}"

  greenhouse_a_toggle_tandon_valve:
    alias: "Greenhouse A: Toggle Tandon Valve"
    description: "Toggles the tandon valve by publishing ON/OFF to MQTT based on current state."
    icon: mdi:valve-open-close
    # Menggunakan 'choose' adalah cara yang paling andal untuk menangani
    # logika if-then-else, menghindari race condition.
    sequence:
      - choose:
          # JIKA saklar saat ini 'on'
          - conditions:
              - condition: state
                entity_id: switch.greenhouse_a_katup_pengisian_tandon
                state: 'on'
            # MAKA kirim perintah 'OFF'
            sequence:
              - service: mqtt.publish
                data:
                  topic: "hidroponik/greenhouse_a/pompa/tandon/kontrol"
                  payload: "OFF"
        # JIKA TIDAK (jika saklar 'off' atau status lainnya)
        default:
          # MAKA kirim perintah 'ON'
          - service: mqtt.publish
            data:
              topic: "hidroponik/greenhouse_a/pompa/tandon/kontrol"
              payload: "ON"

  greenhouse_a_test_tandon_manual:
    alias: "Greenhouse A: Test Tandon Manual"
    icon: mdi:test-tube
    sequence:
      - service: mqtt.publish
        data:
          topic: "hidroponik/greenhouse_a/pompa/tandon/kontrol"
          payload: "ON"
          retain: false
      - delay: '00:00:10'
      - service: mqtt.publish
        data:
          topic: "hidroponik/greenhouse_a/pompa/tandon/kontrol" 
          payload: "OFF"
          retain: false

# =================================================
# == AUTOMATIONS
# =================================================
automation:
  - id: 'greenhouse_a_otomatisasi_penyiraman_terjadwal_per_jam'
    alias: "Greenhouse A: Jalankan Penyiraman Terjadwal Setiap Jam"
    description: "Menyiram tanaman setiap jam dalam rentang waktu yang dapat diatur."
    trigger:
      - platform: time_pattern
        hours: "/1"
    condition:
      - condition: and
        conditions:
          - condition: state
            entity_id: input_boolean.greenhouse_a_penyiraman_otomatis_terjadwal
            state: 'on'
          - condition: state
            entity_id: binary_sensor.greenhouse_a_status_esp32
            state: 'on'
          - condition: time
            after: input_datetime.greenhouse_a_penyiraman_waktu_mulai
            before: input_datetime.greenhouse_a_penyiraman_waktu_selesai
    action:
      - service: script.greenhouse_a_siram_tanaman
        data: {}
    mode: single

  - id: 'greenhouse_a_otomatisasi_penyiraman_berdasar_suhu'
    alias: "Greenhouse A: Penyiraman Otomatis Berdasar Suhu Udara"
    description: "Menyiram saat suhu udara di atas ambang, dalam rentang waktu yang diizinkan."
    trigger:
      - platform: numeric_state
        entity_id: sensor.greenhouse_a_suhu_udara
        above: input_number.greenhouse_a_suhu_udara_target_max
        for: "00:05:00"
    condition:
      - condition: state
        entity_id: input_boolean.greenhouse_a_penyiraman_otomatis_terjadwal
        state: 'on'
      - condition: time
        after: input_datetime.greenhouse_a_penyiraman_waktu_mulai
        before: input_datetime.greenhouse_a_penyiraman_waktu_selesai
    action:
      - service: script.greenhouse_a_siram_tanaman
        data: {}
    mode: single

  - id: 'greenhouse_a_otomatisasi_auto_dosing_tds'
    alias: "Greenhouse A: Auto-Dosing Nutrisi Jika TDS Rendah"
    description: "Menambahkan nutrisi A & B jika TDS turun di bawah target."
    trigger:
      # Memicu ketika nilai sensor TDS berubah dan menjadi di bawah target
      - platform: numeric_state
        entity_id: sensor.greenhouse_a_tds_air
        below: input_number.greenhouse_a_tds_target_min
    condition:
      # Hanya jalankan jika automasi diaktifkan
      - condition: state
        entity_id: input_boolean.greenhouse_a_auto_dosing_enabled
        state: 'on'
    action:
      # Panggil skrip untuk dosis nutrisi A, lalu B
      - service: script.greenhouse_a_dosis_nutrisi_a
      - delay: '00:01:00' # Tunggu 1 menit agar nutrisi A tercampur
      - service: script.greenhouse_a_dosis_nutrisi_b
    # Mencegah penumpukan jika TDS berfluktuasi.
    # Setelah berjalan, automasi ini tidak akan berjalan lagi sampai kondisi menjadi salah (TDS naik di atas target) dan kemudian menjadi benar lagi.
    mode: single

  - id: 'greenhouse_a_otomatisasi_auto_dosing_ph'
    alias: "Greenhouse A: Auto-Dosing pH Down Jika pH Tinggi"
    description: "Menambahkan larutan pH down jika pH naik di atas target."
    trigger:
      # Memicu ketika nilai sensor pH berubah dan menjadi di atas target
      - platform: numeric_state
        entity_id: sensor.greenhouse_a_ph_air
        above: input_number.greenhouse_a_ph_target_max
    condition:
      # Hanya jalankan jika automasi diaktifkan
      - condition: state
        entity_id: input_boolean.greenhouse_a_auto_dosing_enabled
        state: 'on'
    action:
      - service: script.greenhouse_a_dosis_ph
    # Mencegah penumpukan jika pH berfluktuasi.
    # Setelah berjalan, automasi ini tidak akan berjalan lagi sampai kondisi menjadi salah (pH turun di bawah target) dan kemudian menjadi benar lagi.
    mode: single

  - id: 'greenhouse_a_otomatisasi_auto_refill_start'
    alias: "Greenhouse A: Mulai Pengisian Tandon Jika Air Rendah"
    trigger:
      # Pemicu 1: Periksa setiap kali level air berubah. Ini lebih andal.
      - platform: state
        entity_id: sensor.greenhouse_a_level_air
      # Pemicu 2: Periksa saat saklar automasi baru saja dinyalakan.
      - platform: state
        entity_id: input_boolean.greenhouse_a_auto_refill_enabled
        to: 'on'
    condition:
      - condition: state
        entity_id: input_boolean.greenhouse_a_auto_refill_enabled
        state: 'on'
      - condition: state
        entity_id: switch.greenhouse_a_katup_pengisian_tandon
        state: 'off'
      - condition: numeric_state
        entity_id: sensor.greenhouse_a_level_air
        below: input_number.greenhouse_a_refill_target_low
    action:
      - service: switch.turn_on
        target:
          entity_id: switch.greenhouse_a_katup_pengisian_tandon
    mode: single

  - id: 'greenhouse_a_otomatisasi_auto_refill_stop'
    alias: "Greenhouse A: Hentikan Pengisian Tandon Jika Air Penuh"
    trigger:
      - platform: numeric_state
        entity_id: sensor.greenhouse_a_level_air
        above: input_number.greenhouse_a_refill_target_high
    condition:
      - condition: state
        entity_id: switch.greenhouse_a_katup_pengisian_tandon
        state: 'on'
    action:
      - service: switch.turn_off
        target:
          entity_id: switch.greenhouse_a_katup_pengisian_tandon
    mode: single

  # Automation sync: Connect input_boolean to MQTT switches
  - id: 'greenhouse_a_sync_auto_dosing_to_mqtt'
    alias: "Greenhouse A: Sync Auto Dosing to MQTT"
    description: "Synchronize input_boolean.greenhouse_a_auto_dosing_enabled with MQTT"
    trigger:
      - platform: state
        entity_id: input_boolean.greenhouse_a_auto_dosing_enabled
    condition:
      - condition: template
        value_template: "{{ trigger.to_state.state in ['on', 'off'] }}"
    action:
      - service: mqtt.publish
        data:
          topic: "hidroponik/greenhouse_a/automasi/dosing/kontrol"
          payload: "{{ 'ON' if is_state('input_boolean.greenhouse_a_auto_dosing_enabled', 'on') else 'OFF' }}"
          retain: true
    mode: single

  - id: 'greenhouse_a_sync_auto_refill_to_mqtt'
    alias: "Greenhouse A: Sync Auto Refill to MQTT"
    description: "Synchronize input_boolean.greenhouse_a_auto_refill_enabled with MQTT"
    trigger:
      - platform: state
        entity_id: input_boolean.greenhouse_a_auto_refill_enabled
    condition:
      - condition: template
        value_template: "{{ trigger.to_state.state in ['on', 'off'] }}"
    action:
      - service: mqtt.publish
        data:
          topic: "hidroponik/greenhouse_a/automasi/refill/kontrol"
          payload: "{{ 'ON' if is_state('input_boolean.greenhouse_a_auto_refill_enabled', 'on') else 'OFF' }}"
          retain: true
    mode: single

  - id: 'greenhouse_a_sync_auto_irrigation_to_mqtt'
    alias: "Greenhouse A: Sync Auto Irrigation to MQTT"
    description: "Synchronize input_boolean.greenhouse_a_penyiraman_otomatis_terjadwal with MQTT"
    trigger:
      - platform: state
        entity_id: input_boolean.greenhouse_a_penyiraman_otomatis_terjadwal
    condition:
      - condition: template
        value_template: "{{ trigger.to_state.state in ['on', 'off'] }}"
    action:
      - service: mqtt.publish
        data:
          topic: "hidroponik/greenhouse_a/automasi/irrigation/kontrol"
          payload: "{{ 'ON' if is_state('input_boolean.greenhouse_a_penyiraman_otomatis_terjadwal', 'on') else 'OFF' }}"
          retain: true
    mode: single

  # Reverse sync: Update input_boolean when MQTT switch changes
  - id: 'greenhouse_a_sync_mqtt_auto_dosing_to_input'
    alias: "Greenhouse A: Sync MQTT Auto Dosing to Input Boolean"
    description: "Update input_boolean when MQTT switch changes externally"
    trigger:
      - platform: state
        entity_id: switch.greenhouse_a_monitor_auto_dosing
    condition:
      - condition: template
        value_template: "{{ trigger.to_state.state != states('input_boolean.greenhouse_a_auto_dosing_enabled') }}"
    action:
      - service: "input_boolean.{{ 'turn_on' if is_state('switch.greenhouse_a_monitor_auto_dosing', 'on') else 'turn_off' }}"
        target:
          entity_id: input_boolean.greenhouse_a_auto_dosing_enabled
    mode: single

  - id: 'greenhouse_a_sync_mqtt_auto_refill_to_input'
    alias: "Greenhouse A: Sync MQTT Auto Refill to Input Boolean"
    description: "Update input_boolean when MQTT switch changes externally"
    trigger:
      - platform: state
        entity_id: switch.greenhouse_a_monitor_auto_refill
    condition:
      - condition: template
        value_template: "{{ trigger.to_state.state != states('input_boolean.greenhouse_a_auto_refill_enabled') }}"
    action:
      - service: "input_boolean.{{ 'turn_on' if is_state('switch.greenhouse_a_monitor_auto_refill', 'on') else 'turn_off' }}"
        target:
          entity_id: input_boolean.greenhouse_a_auto_refill_enabled
    mode: single

  - id: 'greenhouse_a_sync_mqtt_auto_irrigation_to_input'
    alias: "Greenhouse A: Sync MQTT Auto Irrigation to Input Boolean"
    description: "Update input_boolean when MQTT switch changes externally"
    trigger:
      - platform: state
        entity_id: switch.greenhouse_a_monitor_auto_irrigation
    condition:
      - condition: template
        value_template: "{{ trigger.to_state.state != states('input_boolean.greenhouse_a_penyiraman_otomatis_terjadwal') }}"
    action:
      - service: "input_boolean.{{ 'turn_on' if is_state('switch.greenhouse_a_monitor_auto_irrigation', 'on') else 'turn_off' }}"
        target:
          entity_id: input_boolean.greenhouse_a_penyiraman_otomatis_terjadwal
    mode: single

  # Startup sync: Ensure MQTT matches HA state on startup
  - id: 'greenhouse_a_startup_sync_automations'
    alias: "Greenhouse A: Startup Sync Automation States"
    description: "Sync all automation states to MQTT on Home Assistant startup"
    trigger:
      - platform: homeassistant
        event: start
    action:
      - delay: '00:00:30'  # Wait for MQTT to be ready
      - service: mqtt.publish
        data:
          topic: "hidroponik/greenhouse_a/automasi/dosing/kontrol"
          payload: "{{ 'ON' if is_state('input_boolean.greenhouse_a_auto_dosing_enabled', 'on') else 'OFF' }}"
          retain: true
      - service: mqtt.publish
        data:
          topic: "hidroponik/greenhouse_a/automasi/refill/kontrol"
          payload: "{{ 'ON' if is_state('input_boolean.greenhouse_a_auto_refill_enabled', 'on') else 'OFF' }}"
          retain: true
      - service: mqtt.publish
        data:
          topic: "hidroponik/greenhouse_a/automasi/irrigation/kontrol"
          payload: "{{ 'ON' if is_state('input_boolean.greenhouse_a_penyiraman_otomatis_terjadwal', 'on') else 'OFF' }}"
          retain: true
    mode: single

# =================================================
# == SENSORS & ENTITIES (MQTT)
# =================================================
mqtt:
  sensor:
    - name: "Greenhouse A Level Air"
      unique_id: greenhouse_a_level_air
      state_topic: "hidroponik/greenhouse_a/air/level_cm"
      unit_of_measurement: "cm"
      icon: mdi:waves-arrow-up
      # Define the anchors on the first entity. They can be aliased on all subsequent entities.
      availability: &greenhouse_a_availability
        - topic: "hidroponik/greenhouse_a/status/LWT"
          payload_available: "Online"
          payload_not_available: "Offline"
      device: &greenhouse_a_device
        identifiers:
          - "hidroponik_greenhouse_a"
        name: "Hidroponik Greenhouse A"
        manufacturer: "DIY Project"
        model: "ESP32 Hydroponics Controller"

    - name: "Greenhouse A Suhu Air"
      unique_id: greenhouse_a_suhu_air
      state_topic: "hidroponik/greenhouse_a/air/water_temp_c"
      unit_of_measurement: "Â°C"
      device_class: temperature
      availability: *greenhouse_a_availability
      device: *greenhouse_a_device

    - name: "Greenhouse A Suhu Udara"
      unique_id: greenhouse_a_suhu_udara
      state_topic: "hidroponik/greenhouse_a/udara/suhu_c"
      unit_of_measurement: "Â°C"
      device_class: temperature
      availability: *greenhouse_a_availability
      device: *greenhouse_a_device

    - name: "Greenhouse A Kelembaban Udara"
      unique_id: greenhouse_a_kelembaban_udara
      state_topic: "hidroponik/greenhouse_a/udara/kelembaban_persen"
      unit_of_measurement: "%"
      device_class: humidity
      availability: *greenhouse_a_availability
      device: *greenhouse_a_device

    - name: "Greenhouse A TDS Air"
      unique_id: greenhouse_a_tds_air
      state_topic: "hidroponik/greenhouse_a/air/tds_ppm"
      unit_of_measurement: "ppm"
      icon: mdi:water-opacity
      availability: *greenhouse_a_availability
      device: *greenhouse_a_device

    - name: "Greenhouse A pH Air"
      unique_id: greenhouse_a_ph_air
      state_topic: "hidroponik/greenhouse_a/air/ph"
      icon: mdi:ph
      state_class: measurement
      availability: *greenhouse_a_availability
      device: *greenhouse_a_device

    - name: "Greenhouse A Tegangan Listrik"
      unique_id: greenhouse_a_tegangan_v
      state_topic: "hidroponik/greenhouse_a/listrik/tegangan_v"
      unit_of_measurement: "V"
      device_class: voltage
      state_class: measurement
      availability: *greenhouse_a_availability
      device: *greenhouse_a_device

    - name: "Greenhouse A Arus Listrik"
      unique_id: greenhouse_a_arus_a
      state_topic: "hidroponik/greenhouse_a/listrik/arus_a"
      unit_of_measurement: "A"
      device_class: current
      state_class: measurement
      availability: *greenhouse_a_availability
      device: *greenhouse_a_device

    - name: "Greenhouse A Daya Listrik"
      unique_id: greenhouse_a_daya_w
      state_topic: "hidroponik/greenhouse_a/listrik/daya_w"
      unit_of_measurement: "W"
      device_class: power
      state_class: measurement
      availability: *greenhouse_a_availability
      device: *greenhouse_a_device

    - name: "Greenhouse A Konsumsi Energi"
      unique_id: greenhouse_a_energi_kwh
      state_topic: "hidroponik/greenhouse_a/listrik/energi_kwh"
      unit_of_measurement: "kWh"
      device_class: energy
      state_class: total_increasing
      availability: *greenhouse_a_availability
      device: *greenhouse_a_device

    - name: "Greenhouse A Frekuensi Listrik"
      unique_id: greenhouse_a_frekuensi_hz
      state_topic: "hidroponik/greenhouse_a/listrik/frekuensi_hz"
      unit_of_measurement: "Hz"
      device_class: frequency
      state_class: measurement
      availability: *greenhouse_a_availability
      device: *greenhouse_a_device

    - name: "Greenhouse A Power Factor"
      unique_id: greenhouse_a_power_factor
      state_topic: "hidroponik/greenhouse_a/listrik/power_factor"
      icon: mdi:alpha-p-circle-outline
      state_class: measurement
      availability: *greenhouse_a_availability
      device: *greenhouse_a_device

  binary_sensor:
    - name: "Greenhouse A Status ESP32"
      unique_id: greenhouse_a_status_esp32
      state_topic: "hidroponik/greenhouse_a/status/LWT"
      payload_on: "Online"
      payload_off: "Offline"
      device_class: connectivity
      device: *greenhouse_a_device

  select:
    - name: "Greenhouse A Mode Sistem"
      unique_id: greenhouse_a_mode_sistem
      state_topic: "hidroponik/greenhouse_a/sistem/mode/status"
      command_topic: "hidroponik/greenhouse_a/sistem/mode/kontrol"
      options:
        - "NUTRITION"
        - "CLEANER"
      optimistic: false
      retain: true
      availability: *greenhouse_a_availability
      device: *greenhouse_a_device

  switch:
    - name: "Greenhouse A Katup Pengisian Tandon"
      unique_id: greenhouse_a_katup_pengisian_tandon
      state_topic: "hidroponik/greenhouse_a/pompa/tandon/status"
      command_topic: "hidroponik/greenhouse_a/pompa/tandon/kontrol"
      payload_on: "ON"
      payload_off: "OFF"
      state_on: "ON"
      state_off: "OFF"
      optimistic: false
      retain: false
      icon: mdi:valve
      availability: *greenhouse_a_availability
      device: *greenhouse_a_device

    # Monitoring switches for automation status
    - name: "Greenhouse A Monitor Auto Dosing"
      unique_id: greenhouse_a_monitor_auto_dosing
      state_topic: "hidroponik/greenhouse_a/automasi/dosing/status"
      command_topic: "hidroponik/greenhouse_a/automasi/dosing/kontrol"
      payload_on: "ON"
      payload_off: "OFF"
      state_on: "ON"
      state_off: "OFF"
      optimistic: false
      retain: true
      icon: mdi:auto-fix
      availability: *greenhouse_a_availability
      device: *greenhouse_a_device

    - name: "Greenhouse A Monitor Auto Refill"
      unique_id: greenhouse_a_monitor_auto_refill
      state_topic: "hidroponik/greenhouse_a/automasi/refill/status"
      command_topic: "hidroponik/greenhouse_a/automasi/refill/kontrol"
      payload_on: "ON"
      payload_off: "OFF"
      state_on: "ON"
      state_off: "OFF"
      optimistic: false
      retain: true
      icon: mdi:water-pump
      availability: *greenhouse_a_availability
      device: *greenhouse_a_device

    - name: "Greenhouse A Monitor Auto Irrigation"
      unique_id: greenhouse_a_monitor_auto_irrigation
      state_topic: "hidroponik/greenhouse_a/automasi/irrigation/status"
      command_topic: "hidroponik/greenhouse_a/automasi/irrigation/kontrol"
      payload_on: "ON"
      payload_off: "OFF"
      state_on: "ON"
      state_off: "OFF"
      optimistic: false
      retain: true
      icon: mdi:sprinkler-variant
      availability: *greenhouse_a_availability
      device: *greenhouse_a_device
